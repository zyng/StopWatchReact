{"version":3,"sources":["components/TimeSaved.js","components/StoperMenu.js","components/ShowTime.js","App.js","index.js"],"names":["TimeSaved","_ref","time","number","react_default","a","createElement","className","Icon","styled","i","_templateObject","props","color","StoperMenu","isStopped","resetClick","stoperClick","saveClick","isRun","changeIconClass","Fragment","onClick","disabled","ShowTime","text","Ulstyled","ul","App_templateObject","App","state","startTime","stopTime","stoperTimeMiliSeconds","stoperTimeSeconds","stoperTimeMinutes","timeDifference","timeDifferenceResumeAndStop","resumeTime","stopped","textTime","_this","stopWatchStartText","textSavedTimes","colorRGB","measureTime","handleStoper","setState","Date","getTime","handleStopStoper","prevState","setInterval","handleStartStoper","newTime","Math","floor","concat","oldMinute","parseInt","colorR","random","colorG","colorB","functionToStop","clearInterval","handleSaveTime","timeToSave","slice","push","goDownWithList","savedTimesBox","document","getElementById","savedTimeBoxHeight","scrollHeight","scrollTop","handleReset","_this$state","this","savedTimesShow","map","index","components_TimeSaved","key","percentage","console","log","dist_default","styles","path","stroke","components_ShowTime","id","components_StoperMenu","Component","defaultProps","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.55b2638f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TimeSaved = ({ time, number }) => {\r\n    return (\r\n        <li className=\"animated fadeIn\"><i className=\"flaticon-stopwatch\"></i><span className=\"stopwatch__saved-time--text\">Pomiar {number}:</span>\r\n            <span > {time}</span></li>\r\n    )\r\n}\r\n\r\nexport default TimeSaved;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Icon = styled.i`\r\n&:before {\r\n    color: ${props => props.color} !important;  \r\n}\r\n`;\r\n\r\nconst StoperMenu = ({ isStopped, resetClick, stoperClick, saveClick, isRun, color }) => {\r\n\r\n    const changeIconClass = isStopped ? \"flaticon-play-button\" : \"flaticon-round-pause-button\";\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"stopwatch__menu\">\r\n                <button className=\"stopwatch__button\" onClick={resetClick} disabled={!isRun || !isStopped}><Icon color={color} className=\"flaticon-refresh\" /></button>\r\n                <button className=\"stopwatch__button\" onClick={stoperClick}><Icon color={color} className={changeIconClass} /></button>\r\n                <button className=\"stopwatch__button\" onClick={saveClick} disabled={isStopped}><Icon color={color} className=\"flaticon-stopwatch\" /> </button>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default StoperMenu;","import React from 'react';\r\n\r\nconst ShowTime = (props) => {\r\n    return (\r\n        <div className=\"stopwatch__actual-time-container\">\r\n            <div className=\"stopwatch__actual-time\">{props.text}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShowTime;","import React, { Component } from 'react';\nimport './css/animate.css';\nimport './css/style.css';\nimport './font/flaticon.css';\nimport TimeSaved from './components/TimeSaved';\nimport StoperMenu from './components/StoperMenu';\nimport ShowTime from './components/ShowTime';\nimport CircularProgressbar from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport styled from 'styled-components';\n\n\nconst Ulstyled = styled.ul`\n  &::-webkit-scrollbar-thumb {\n    &:hover {\n        background: ${props => props.color};\n    }\n  }\n`;\n\nclass App extends Component {\n  state = {\n    startTime: 0,\n    stopTime: 0,\n    stoperTimeMiliSeconds: 0,\n    stoperTimeSeconds: 0,\n    stoperTimeMinutes: 0,\n    timeDifference: 0,\n    timeDifferenceResumeAndStop: 0,\n    resumeTime: 0,\n    stopped: true,\n    textTime: this.props.stopWatchStartText,\n    textSavedTimes: [],\n  }\n\n  colorRGB = \"rgba(62, 152, 199,1)\";\n  measureTime = \"\";\n\n  static defaultProps = {\n    stopWatchStartText: \"00:00:00\",\n  }\n\n  handleStoper = () => {\n    let isStopped = !this.state.stopped;\n    this.setState({\n      stopped: isStopped\n    });\n\n    let startTime;\n\n    if (!this.state.startTime) {\n      startTime = new Date().getTime();\n      this.setState({\n        startTime: startTime,\n      });\n    } else {\n      startTime = this.state.startTime;\n    }\n\n    if (isStopped) {\n      this.handleStopStoper(this.measureTime);\n    } else {\n      const resumeTime = new Date().getTime();\n      const timeDifferenceResumeAndStop = (startTime === resumeTime) ? 0 : (resumeTime - this.state.stopTime);\n\n      this.setState((prevState) => ({\n        resumeTime: resumeTime,\n        timeDifferenceResumeAndStop: timeDifferenceResumeAndStop,\n        timeDifference: prevState.timeDifference + timeDifferenceResumeAndStop,\n      }));\n      this.measureTime = setInterval(this.handleStartStoper, 10)\n    }\n  }\n\n  handleStartStoper = () => {\n\n    const newTime = new Date().getTime() - this.state.timeDifference;\n\n    let stoperTimeMiliSeconds = Math.floor(((newTime - this.state.startTime) % 1000) / 10);\n    stoperTimeMiliSeconds = stoperTimeMiliSeconds < 10 ? `0${stoperTimeMiliSeconds}` : stoperTimeMiliSeconds;\n\n    let stoperTimeSeconds = Math.floor(((newTime - this.state.startTime) / (1000)) % 60);\n    stoperTimeSeconds = stoperTimeSeconds < 10 ? `0${stoperTimeSeconds}` : stoperTimeSeconds;\n\n    let stoperTimeMinutes = Math.floor(((newTime - this.state.startTime) / (1000 * 60)) % 60);\n    stoperTimeMinutes = stoperTimeMinutes < 10 ? `0${stoperTimeMinutes}` : stoperTimeMinutes;\n\n    const oldMinute = parseInt(this.state.stoperTimeMinutes);\n    const currentMinute = parseInt(stoperTimeMinutes);\n\n    if (currentMinute !== oldMinute) {\n      const colorR = Math.floor(Math.random() * 256);\n      const colorG = Math.floor(Math.random() * 256);\n      const colorB = Math.floor(Math.random() * 256);\n\n      this.colorRGB = `rgba(${colorR},${colorG},${colorB},1)`\n    }\n    this.setState({\n      stoperTimeMiliSeconds: stoperTimeMiliSeconds,\n      stoperTimeSeconds: stoperTimeSeconds,\n      stoperTimeMinutes: stoperTimeMinutes,\n      textTime: `${stoperTimeMinutes}:${stoperTimeSeconds}:${stoperTimeMiliSeconds}`\n    });\n  }\n\n  handleStopStoper = (functionToStop) => {\n    clearInterval(functionToStop);\n    this.setState({\n      stopTime: new Date().getTime()\n    });\n  }\n\n  handleSaveTime = () => {\n    const timeToSave = this.state.textTime;\n    const textSavedTimes = this.state.textSavedTimes.slice();\n    textSavedTimes.push(timeToSave);\n\n    this.setState({\n      textSavedTimes,\n    });\n\n    this.goDownWithList();\n  }\n\n  goDownWithList = () => {\n    const savedTimesBox = document.getElementById('times');\n    const savedTimeBoxHeight = savedTimesBox.scrollHeight;\n    savedTimesBox.scrollTop = savedTimeBoxHeight;\n  }\n\n  handleReset = () => {\n    this.handleStopStoper(this.measureTime);\n\n    this.setState({\n      startTime: 0,\n      stopTime: 0,\n      stoperTimeMiliSeconds: 0,\n      stoperTimeSeconds: 0,\n      stoperTimeMinutes: 0,\n      timeDifference: 0,\n      timeDifferenceResumeAndStop: 0,\n      resumeTime: 0,\n      stopped: true,\n      textTime: this.props.stopWatchStartText,\n      textSavedTimes: [],\n    });\n\n    this.measureTime = '';\n    this.colorRGB = \"rgba(62, 152, 199,1)\"\n  }\n\n\n  render() {\n    const { textSavedTimes,\n      stoperTimeSeconds,\n      startTime,\n      textTime,\n      stopped,\n    } = this.state;\n\n    const savedTimesShow = textSavedTimes.map((time, index) => <TimeSaved key={index} number={index + 1} time={time} />)\n    const percentage = stoperTimeSeconds * 1.67;\n    console.log(this.colorRGB);\n    return (\n      <React.Fragment>\n\n        <div className=\"stopwatch\">\n          <div className=\"stopwatch__circle-progress\">\n            <CircularProgressbar percentage={percentage} styles={{ path: { stroke: this.colorRGB } }} />\n            <ShowTime text={textTime} />\n          </div>\n\n          <Ulstyled color={this.colorRGB} className=\"stopwatch__saved-time\" id=\"times\" >\n            {savedTimesShow}\n          </Ulstyled>\n\n          <StoperMenu stoperClick={this.handleStoper}\n            resetClick={this.handleReset}\n            saveClick={this.handleSaveTime}\n            isStopped={stopped}\n            isRun={startTime}\n            color={this.colorRGB}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}